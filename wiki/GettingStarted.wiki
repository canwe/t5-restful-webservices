#labels Featured,Phase-Deploy
#How to get up and running with t5-restful-webservices

= Introduction =

*Version 0.2.0 -- major re-write*

This Tapestry 5 contributed library enables IoC services you write to handle RESTful web service requests.

This is done by writing methods in your service class with the {{{@RestfulWebMethod}}} annotation and using Tapestry's {{{Response}}} to render an appropriate response to the browser.  You contribute your service class to the {{{RestfulWSDispatcher}}} service.

{{{RestfulWSDispatcher}}} adds a {{{RequestFilter}}} to Tapestry 5's pipline to trap HTTP requests intended to be serviced by the RESTful web methods you have written.


= Details =

==Install==

Just drop the source jar (t5-restful-webservices-0.2.0.jar) into the classpath for your Tapestry 5 application.  No other configuration is necessary.  Yes, Tapestry 5 makes it that simple!

==Do a little planning==

You need to come up with a unique, _URL-friendly_ string id for each of your T5 IoC service classes with web methods.  HTTP requests that have such a unique id as the first element of the request path (after the root context path) will be handled by a web method on your service rather than a Tapestry component or event.

Let's start an example.  Let's imagine that our Tapestry 5 web application is rooted at the URL {{{http://myapp.example.org/}}} -- i.e., the root context is "/".

Now imagine we want a RESTful web method named "foo", in a service class named {{{MyWebService}}}.  Let's imagine that we will pass two arguments to this method -- a string and a boolean ("bar" and true) -- and then return the following XML to the browser:

{{{
<foo>
   <stringArg>bar</stringArg>
   <booleanArg>true</booleanArg>
</foo>
}}}

We need to come up with a unique string id for the {{{MyWebService}}} class.  The simple name of the class is a compelling choice, but of course you might have service classes with the same simple name in other packages.  The fully-qualified class name is another possibility, but those can be awfully long and expose your class package structure, which you might not want to do.  Let's just use "my-web-service".

The public URL for a web method is {{{http://myapp.example.org/<service-unique-id>/<method-name>/args...}}}.  So in this example it will be

{{{http://myapp.example.org/my-web-service/foo/bar/true}}}

Tapestry's built-in (and contributed) {{{ValueEncoder}}}s are used to translate the arguments' string values to server-side Java values.

==Write your Tapestry 5 IoC Service==

Implemention is easy.  We implement our Tapestry 5 IoC service as normal, providing the web method "foo".  We annotate that method with {{{@RestfulWebMethod}}}.  Also, the web method must take the Tapestry {{{Request}}} and {{{Response}}} objects as its first two arguments, in that order: 

{{{
public class MyWebService
{
    @RestfulWebMethod
    public void foo (Request req, Response response, String s, boolean b) throws IOException
    {
        PrintWriter writer = response.getPrintWriter("text/xml");
        writer.append("<foo>");
        writer.append("<stringArg>" + s + "</stringArg>");
        writer.append("<booleanArg>" + b + "</booleanArg>");
        writer.append("</foo>");
        writer.flush();
        writer.close();
    }

    // Other methods, restful or not!...
}
}}}

The {{{Request}}} object is provided for your convenience, and based on feedback, I might eliminate it.  The {{{Response}}} object is necessary, of course, for you to render appropriate content back to the browser.

==Contribute your service to the RESTful web service module==

In your application's IoC module, we contribute our IoC service to the {{{RestfulWSDispatcher}}}.  The dispatcher takes a mapped configuration with the unique service id we used for the map entry's key and the service as the value.  With our example,

{{{
public void contributeRestfulWSDispatcher (MappedConfiguration<String, Object> config)
{
    config.add("my-web-service", new MyWebService());        
}
}}}

==Enjoy!==

Now start up your web server and hit

{{{http://myapp.example.org/my-web-service/foo/bar/true}}}

Since Tapestry's boolean {{{ValueEncoder}}} translates any non-empty string as a boolean true on the server side, try replacing "true" in the URL with "baz" or something.